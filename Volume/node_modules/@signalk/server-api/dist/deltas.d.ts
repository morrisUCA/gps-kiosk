import { Brand } from './brand';
export interface WithContext {
    context: Context;
}
/** @inline - Not exported as part of the public API */
type NormalizedBaseDelta = {
    context: Context;
    $source: SourceRef;
    source: Source;
    path: Path;
    timestamp: Timestamp;
};
export type NormalizedMetaDelta = NormalizedBaseDelta & {
    value: MetaValue;
    isMeta: true;
};
export type NormalizedValueDelta = NormalizedBaseDelta & {
    value: Value;
    isMeta: false;
};
export type NormalizedDelta = NormalizedValueDelta | NormalizedMetaDelta;
export type SourceRef = Brand<string, 'sourceRef'>;
export type Source = any;
export type Path = Brand<string, 'path'>;
export type Timestamp = Brand<string, 'timestamp'>;
export type Context = Brand<string, 'context'>;
export type Value = object | number | string | null | Notification | boolean;
export interface Delta {
    context?: Context;
    updates: Update[];
}
/**
 * @deprecated earlier mistake assumed ValuesDelta and MetaDelta were separate
 * @hidden
 */
export type ValuesDelta = Delta;
/**
 * @deprecated earlier mistake assumed ValuesDelta and MetaDelta were separate
 * @hidden
 */
export type MetaDelta = Delta;
export type Update = {
    timestamp?: Timestamp;
    source?: Source;
    $source?: SourceRef;
} & ({
    values: PathValue[];
} | {
    meta: Meta[];
});
export declare function hasValues(u: Update): u is Update & {
    values: PathValue[];
};
export declare function hasMeta(u: Update): u is Update & {
    meta: Meta[];
};
export interface PathValue {
    path: Path;
    value: Value;
}
export interface Notification {
    state: ALARM_STATE;
    method: ALARM_METHOD[];
    message: string;
}
export interface Meta {
    path: Path;
    value: MetaValue;
}
export interface MetaValue {
    description?: string;
    units?: string;
    example?: string;
    timeout?: number;
    displayName?: string;
    displayScale?: {
        lower: number;
        upper: number;
    };
    zones?: Zone[];
    supportsPut?: boolean;
}
export declare enum ALARM_STATE {
    nominal = "nominal",
    normal = "normal",
    alert = "alert",
    warn = "warn",
    alarm = "alarm",
    emergency = "emergency"
}
export declare enum ALARM_METHOD {
    visual = "visual",
    sound = "sound"
}
export interface Zone {
    lower: number | undefined;
    upper: number | undefined;
    state: ALARM_STATE;
    message: string;
}
export {};
//# sourceMappingURL=deltas.d.ts.map